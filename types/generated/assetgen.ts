/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/health": {
    /** Healthcheck */
    get: operations["healthcheck_api_health_get"];
  };
  "/api/orgs": {
    /** List Organizations */
    get: operations["list_organizations_api_orgs_get"];
    /** Create Organization */
    post: operations["create_organization_api_orgs_post"];
  };
  "/api/orgs/{org_id}": {
    /** Get Organization */
    get: operations["get_organization_api_orgs__org_id__get"];
    /** Delete Organization */
    delete: operations["delete_organization_api_orgs__org_id__delete"];
    /** Update Organization */
    patch: operations["update_organization_api_orgs__org_id__patch"];
  };
  "/api/orgs/{org_id}/projects": {
    /** List Projects */
    get: operations["list_projects_api_orgs__org_id__projects_get"];
    /** Create Project */
    post: operations["create_project_api_orgs__org_id__projects_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}": {
    /** Get Project */
    get: operations["get_project_api_orgs__org_id__projects__project_id__get"];
    /** Delete Project */
    delete: operations["delete_project_api_orgs__org_id__projects__project_id__delete"];
    /** Update Project */
    patch: operations["update_project_api_orgs__org_id__projects__project_id__patch"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets": {
    /** List Assets */
    get: operations["list_assets_api_orgs__org_id__projects__project_id__assets_get"];
    /** Create Asset */
    post: operations["create_asset_api_orgs__org_id__projects__project_id__assets_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets/{asset_id}": {
    /** Get Asset */
    get: operations["get_asset_api_orgs__org_id__projects__project_id__assets__asset_id__get"];
    /** Delete Asset */
    delete: operations["delete_asset_api_orgs__org_id__projects__project_id__assets__asset_id__delete"];
    /** Update Asset */
    patch: operations["update_asset_api_orgs__org_id__projects__project_id__assets__asset_id__patch"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets/{asset_id}/generations": {
    /** List Generations */
    get: operations["list_generations_api_orgs__org_id__projects__project_id__assets__asset_id__generations_get"];
    /** Create Generation */
    post: operations["create_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets/{asset_id}/generations/{generation_id}": {
    /** Get Generation */
    get: operations["get_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__get"];
    /** Delete Generation */
    delete: operations["delete_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__delete"];
    /** Update Generation */
    patch: operations["update_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__patch"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets/{asset_id}/generations/{generation_id}/variants": {
    /** List Variants */
    get: operations["list_variants_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants_get"];
    /** Create Variant */
    post: operations["create_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/assets/{asset_id}/generations/{generation_id}/variants/{variant_id}": {
    /** Get Variant */
    get: operations["get_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__get"];
    /** Delete Variant */
    delete: operations["delete_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__delete"];
    /** Update Variant */
    patch: operations["update_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__patch"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/themes": {
    /** List Themes */
    get: operations["list_themes_api_orgs__org_id__projects__project_id__themes_get"];
    /** Create Theme */
    post: operations["create_theme_api_orgs__org_id__projects__project_id__themes_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/themes/{theme_id}": {
    /** Get Theme */
    get: operations["get_theme_api_orgs__org_id__projects__project_id__themes__theme_id__get"];
    /** Delete Theme */
    delete: operations["delete_theme_api_orgs__org_id__projects__project_id__themes__theme_id__delete"];
    /** Update Theme */
    patch: operations["update_theme_api_orgs__org_id__projects__project_id__themes__theme_id__patch"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/concept-images": {
    /** List Concept Images */
    get: operations["list_concept_images_api_orgs__org_id__projects__project_id__concept_images_get"];
    /** Create Concept Image */
    post: operations["create_concept_image_api_orgs__org_id__projects__project_id__concept_images_post"];
  };
  "/api/orgs/{org_id}/projects/{project_id}/concept-images/{image_id}": {
    /** Get Concept Image */
    get: operations["get_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__get"];
    /** Delete Concept Image */
    delete: operations["delete_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__delete"];
    /** Update Concept Image */
    patch: operations["update_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__patch"];
  };
  "/api/users": {
    /** List Users */
    get: operations["list_users_api_users_get"];
    /** Create User */
    post: operations["create_user_api_users_post"];
  };
  "/api/users/{user_id}": {
    /** Get User */
    get: operations["get_user_api_users__user_id__get"];
    /** Delete User */
    delete: operations["delete_user_api_users__user_id__delete"];
    /** Update User */
    patch: operations["update_user_api_users__user_id__patch"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Asset */
    Asset: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /**
       * Prompt
       * @description Base prompt or core idea for the asset
       */
      prompt?: string | null;
      /** Size */
      size?: string | null;
      /** Width */
      width?: number | null;
      /** Height */
      height?: number | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Name */
      theme_name?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[];
      /** Tags */
      tags?: string[];
      /** Created By */
      created_by?: string | null;
      /** Final Variant Id */
      final_variant_id?: string | null;
      /** Current Image Url */
      current_image_url?: string | null;
      /** Latest Generation Id */
      latest_generation_id?: string | null;
      /** Latest Generation At */
      latest_generation_at?: string | null;
    };
    /** AssetCreate */
    AssetCreate: {
      /** Description */
      description?: string | null;
      /** Prompt */
      prompt?: string | null;
      /** Size */
      size?: string | null;
      /** Width */
      width?: number | null;
      /** Height */
      height?: number | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Name */
      theme_name?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
      /** Tags */
      tags?: string[] | null;
      /** Created By */
      created_by?: string | null;
      /** Final Variant Id */
      final_variant_id?: string | null;
      /** Current Image Url */
      current_image_url?: string | null;
      /** Latest Generation Id */
      latest_generation_id?: string | null;
      /** Latest Generation At */
      latest_generation_at?: string | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Name */
      name: string;
    };
    /** AssetUpdate */
    AssetUpdate: {
      /** Description */
      description?: string | null;
      /** Prompt */
      prompt?: string | null;
      /** Size */
      size?: string | null;
      /** Width */
      width?: number | null;
      /** Height */
      height?: number | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Name */
      theme_name?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
      /** Tags */
      tags?: string[] | null;
      /** Created By */
      created_by?: string | null;
      /** Final Variant Id */
      final_variant_id?: string | null;
      /** Current Image Url */
      current_image_url?: string | null;
      /** Latest Generation Id */
      latest_generation_id?: string | null;
      /** Latest Generation At */
      latest_generation_at?: string | null;
      /** Name */
      name?: string | null;
    };
    /** ConceptImage */
    ConceptImage: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Image Url
       * @description URL or storage path for the concept/reference image
       */
      image_url: string;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Tags */
      tags?: string[];
      /** Description */
      description?: string | null;
      /** Attribution */
      attribution?: string | null;
      /** Uploaded By */
      uploaded_by?: string | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Asset Id */
      asset_id?: string | null;
      /**
       * Usage Count
       * @default 0
       */
      usage_count?: number | null;
    };
    /** ConceptImageCreate */
    ConceptImageCreate: {
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Tags */
      tags?: string[] | null;
      /** Description */
      description?: string | null;
      /** Attribution */
      attribution?: string | null;
      /** Uploaded By */
      uploaded_by?: string | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Asset Id */
      asset_id?: string | null;
      /** Usage Count */
      usage_count?: number | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Image Url */
      image_url: string;
    };
    /** ConceptImageUpdate */
    ConceptImageUpdate: {
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Tags */
      tags?: string[] | null;
      /** Description */
      description?: string | null;
      /** Attribution */
      attribution?: string | null;
      /** Uploaded By */
      uploaded_by?: string | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Asset Id */
      asset_id?: string | null;
      /** Usage Count */
      usage_count?: number | null;
      /** Image Url */
      image_url?: string | null;
    };
    /** Generation */
    Generation: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Prompt Text
       * @description The exact prompt text used for this generation run
       */
      prompt_text: string;
      /**
       * Parameters
       * @description Model and generation parameters
       */
      parameters?: Record<string, never>;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Snapshot */
      theme_snapshot?: Record<string, never> | null;
      /** Concept Image Ids */
      concept_image_ids?: string[];
      /** Concept Image Weights */
      concept_image_weights?: {
        [key: string]: number;
      } | null;
      /**
       * Variant Count
       * @default 0
       */
      variant_count?: number;
      /** Triggered By */
      triggered_by?: string | null;
      /** @default pending */
      status?: components["schemas"]["GenerationStatus"];
      /** Notes */
      notes?: string | null;
      /** Version Number */
      version_number?: number | null;
      /** Variant Summary */
      variant_summary?: Record<string, never>[] | null;
    };
    /** GenerationCreate */
    GenerationCreate: {
      /** Parameters */
      parameters?: Record<string, never> | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Snapshot */
      theme_snapshot?: Record<string, never> | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
      /** Concept Image Weights */
      concept_image_weights?: {
        [key: string]: number;
      } | null;
      /** Variant Count */
      variant_count?: number | null;
      /** Triggered By */
      triggered_by?: string | null;
      status?: components["schemas"]["GenerationStatus"] | null;
      /** Notes */
      notes?: string | null;
      /** Version Number */
      version_number?: number | null;
      /** Variant Summary */
      variant_summary?: Record<string, never>[] | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Prompt Text */
      prompt_text: string;
    };
    /**
     * GenerationStatus
     * @enum {string}
     */
    GenerationStatus: "pending" | "running" | "completed" | "failed";
    /** GenerationUpdate */
    GenerationUpdate: {
      /** Parameters */
      parameters?: Record<string, never> | null;
      /** Theme Id */
      theme_id?: string | null;
      /** Theme Snapshot */
      theme_snapshot?: Record<string, never> | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
      /** Concept Image Weights */
      concept_image_weights?: {
        [key: string]: number;
      } | null;
      /** Variant Count */
      variant_count?: number | null;
      /** Triggered By */
      triggered_by?: string | null;
      status?: components["schemas"]["GenerationStatus"] | null;
      /** Notes */
      notes?: string | null;
      /** Version Number */
      version_number?: number | null;
      /** Variant Summary */
      variant_summary?: Record<string, never>[] | null;
      /** Prompt Text */
      prompt_text?: string | null;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** Membership */
    Membership: {
      /** Org Id */
      org_id: string;
      /**
       * Role
       * @description Role in the org (admin/editor/viewer/etc.)
       */
      role: string;
    };
    /** Organization */
    Organization: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /** Owner User Id */
      owner_user_id?: string | null;
      /** Plan Tier */
      plan_tier?: string | null;
      /**
       * Members Summary
       * @description Optional denormalized summary of members (name, email, role) for quick display
       */
      members_summary?: Record<string, never>[] | null;
    };
    /** OrganizationCreate */
    OrganizationCreate: {
      /** Owner User Id */
      owner_user_id?: string | null;
      /** Plan Tier */
      plan_tier?: string | null;
      /** Members Summary */
      members_summary?: Record<string, never>[] | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Name */
      name: string;
    };
    /** OrganizationUpdate */
    OrganizationUpdate: {
      /** Owner User Id */
      owner_user_id?: string | null;
      /** Plan Tier */
      plan_tier?: string | null;
      /** Members Summary */
      members_summary?: Record<string, never>[] | null;
      /** Name */
      name?: string | null;
    };
    /** Project */
    Project: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /** Description */
      description?: string | null;
      /** Settings */
      settings?: Record<string, never> | null;
      /**
       * Style Guide Markdown
       * @description Optional project-level style guide markdown. Exempt from indexing where appropriate.
       */
      style_guide_markdown?: string | null;
      style_guide?: components["schemas"]["StyleGuide"] | null;
      /**
       * Asset Count
       * @default 0
       */
      asset_count?: number | null;
      /**
       * Theme Count
       * @default 0
       */
      theme_count?: number | null;
    };
    /** ProjectCreate */
    ProjectCreate: {
      /** Description */
      description?: string | null;
      /** Settings */
      settings?: Record<string, never> | null;
      /** Style Guide Markdown */
      style_guide_markdown?: string | null;
      style_guide?: components["schemas"]["StyleGuide"] | null;
      /** Asset Count */
      asset_count?: number | null;
      /** Theme Count */
      theme_count?: number | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Name */
      name: string;
    };
    /** ProjectMembership */
    ProjectMembership: {
      /** Project Id */
      project_id: string;
      /**
       * Role
       * @description Role in the project (contributor/viewer/etc.)
       */
      role: string;
    };
    /** ProjectUpdate */
    ProjectUpdate: {
      /** Description */
      description?: string | null;
      /** Settings */
      settings?: Record<string, never> | null;
      /** Style Guide Markdown */
      style_guide_markdown?: string | null;
      style_guide?: components["schemas"]["StyleGuide"] | null;
      /** Asset Count */
      asset_count?: number | null;
      /** Theme Count */
      theme_count?: number | null;
      /** Name */
      name?: string | null;
    };
    /** StyleGuide */
    StyleGuide: {
      /**
       * Markdown Text
       * @description Style guide content in markdown
       */
      markdown_text: string;
      /** Title */
      title?: string | null;
      /** Last Edited By */
      last_edited_by?: string | null;
      /** Last Edited At */
      last_edited_at?: string | null;
    };
    /** Theme */
    Theme: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name: string;
      /** Style Keywords */
      style_keywords?: string[];
      /**
       * Color Palette
       * @description List of color hex codes
       */
      color_palette?: string[];
      /** Description */
      description?: string | null;
      /**
       * Example Image
       * @description URL or storage path to an example image
       */
      example_image?: string | null;
      /** Created By */
      created_by?: string | null;
      /** Style Guide Markdown */
      style_guide_markdown?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[];
    };
    /** ThemeCreate */
    ThemeCreate: {
      /** Name */
      name: string;
      /** Style Keywords */
      style_keywords?: string[] | null;
      /** Color Palette */
      color_palette?: string[] | null;
      /** Description */
      description?: string | null;
      /** Example Image */
      example_image?: string | null;
      /** Created By */
      created_by?: string | null;
      /** Style Guide Markdown */
      style_guide_markdown?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
    };
    /** ThemeUpdate */
    ThemeUpdate: {
      /** Name */
      name?: string | null;
      /** Style Keywords */
      style_keywords?: string[] | null;
      /** Color Palette */
      color_palette?: string[] | null;
      /** Description */
      description?: string | null;
      /** Example Image */
      example_image?: string | null;
      /** Created By */
      created_by?: string | null;
      /** Style Guide Markdown */
      style_guide_markdown?: string | null;
      /** Concept Image Ids */
      concept_image_ids?: string[] | null;
    };
    /**
     * User
     * @description User profile document. Typically this doc's ID matches Firebase Auth UID.
     */
    User: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /** Name */
      name?: string | null;
      /** Email */
      email?: string | null;
      /** Profile Picture Url */
      profile_picture_url?: string | null;
      /**
       * Org Memberships
       * @description List of organizations and roles the user belongs to
       */
      org_memberships?: components["schemas"]["Membership"][] | null;
      /**
       * Project Memberships
       * @description Optional per-project memberships and roles
       */
      project_memberships?: components["schemas"]["ProjectMembership"][] | null;
      /** Last Login */
      last_login?: string | null;
      /** Preferences */
      preferences?: Record<string, never> | null;
    };
    /** UserCreate */
    UserCreate: {
      /** Name */
      name?: string | null;
      /** Email */
      email?: string | null;
      /** Profile Picture Url */
      profile_picture_url?: string | null;
      /** Org Memberships */
      org_memberships?: components["schemas"]["Membership"][] | null;
      /** Project Memberships */
      project_memberships?: components["schemas"]["ProjectMembership"][] | null;
      /** Last Login */
      last_login?: string | null;
      /** Preferences */
      preferences?: Record<string, never> | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
    };
    /** UserUpdate */
    UserUpdate: {
      /** Name */
      name?: string | null;
      /** Email */
      email?: string | null;
      /** Profile Picture Url */
      profile_picture_url?: string | null;
      /** Org Memberships */
      org_memberships?: components["schemas"]["Membership"][] | null;
      /** Project Memberships */
      project_memberships?: components["schemas"]["ProjectMembership"][] | null;
      /** Last Login */
      last_login?: string | null;
      /** Preferences */
      preferences?: Record<string, never> | null;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** Variant */
    Variant: {
      /**
       * Id
       * @description Document ID (Firestore doc id)
       */
      id?: string | null;
      /**
       * Org Id
       * @description Organization ID (tenant)
       */
      org_id?: string | null;
      /**
       * Project Id
       * @description Project ID if applicable
       */
      project_id?: string | null;
      /** Created At */
      created_at?: string | null;
      /** Updated At */
      updated_at?: string | null;
      /**
       * Image Url
       * @description URL or storage path to the generated image variant
       */
      image_url: string;
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Metadata */
      metadata?: Record<string, never> | null;
      /**
       * Is Selected
       * @default false
       */
      is_selected?: boolean | null;
      /** Feedback */
      feedback?: string | null;
      /** Generated At */
      generated_at?: string | null;
    };
    /** VariantCreate */
    VariantCreate: {
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Metadata */
      metadata?: Record<string, never> | null;
      /** Is Selected */
      is_selected?: boolean | null;
      /** Feedback */
      feedback?: string | null;
      /** Generated At */
      generated_at?: string | null;
      /**
       * Id
       * @description Optional Firestore document id to use.
       */
      id?: string | null;
      /** Image Url */
      image_url: string;
    };
    /** VariantUpdate */
    VariantUpdate: {
      /** Thumbnail Url */
      thumbnail_url?: string | null;
      /** Metadata */
      metadata?: Record<string, never> | null;
      /** Is Selected */
      is_selected?: boolean | null;
      /** Feedback */
      feedback?: string | null;
      /** Generated At */
      generated_at?: string | null;
      /** Image Url */
      image_url?: string | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Healthcheck */
  healthcheck_api_health_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": {
            [key: string]: string;
          };
        };
      };
    };
  };
  /** List Organizations */
  list_organizations_api_orgs_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"][];
        };
      };
    };
  };
  /** Create Organization */
  create_organization_api_orgs_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Organization */
  get_organization_api_orgs__org_id__get: {
    parameters: {
      path: {
        org_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Organization */
  delete_organization_api_orgs__org_id__delete: {
    parameters: {
      path: {
        org_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Organization */
  update_organization_api_orgs__org_id__patch: {
    parameters: {
      path: {
        org_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["OrganizationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Organization"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Projects */
  list_projects_api_orgs__org_id__projects_get: {
    parameters: {
      path: {
        org_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Project */
  create_project_api_orgs__org_id__projects_post: {
    parameters: {
      path: {
        org_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Project */
  get_project_api_orgs__org_id__projects__project_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Project */
  delete_project_api_orgs__org_id__projects__project_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Project */
  update_project_api_orgs__org_id__projects__project_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProjectUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Assets */
  list_assets_api_orgs__org_id__projects__project_id__assets_get: {
    parameters: {
      query?: {
        /** @description Filter by asset tag. */
        tag?: string | null;
        /** @description Filter by related theme id. */
        theme_id?: string | null;
      };
      path: {
        org_id: string;
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Asset */
  create_asset_api_orgs__org_id__projects__project_id__assets_post: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Asset */
  get_asset_api_orgs__org_id__projects__project_id__assets__asset_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Asset */
  delete_asset_api_orgs__org_id__projects__project_id__assets__asset_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Asset */
  update_asset_api_orgs__org_id__projects__project_id__assets__asset_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AssetUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Asset"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Generations */
  list_generations_api_orgs__org_id__projects__project_id__assets__asset_id__generations_get: {
    parameters: {
      query?: {
        order_by?: string;
        descending?: boolean;
      };
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Generation"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Generation */
  create_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations_post: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerationCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Generation"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Generation */
  get_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Generation"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Generation */
  delete_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Generation */
  update_generation_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GenerationUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Generation"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Variants */
  list_variants_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants_get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Variant"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Variant */
  create_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants_post: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VariantCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Variant"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Variant */
  get_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
        variant_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Variant"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Variant */
  delete_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
        variant_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Variant */
  update_variant_api_orgs__org_id__projects__project_id__assets__asset_id__generations__generation_id__variants__variant_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        asset_id: string;
        generation_id: string;
        variant_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VariantUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Variant"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Themes */
  list_themes_api_orgs__org_id__projects__project_id__themes_get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Theme"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Theme */
  create_theme_api_orgs__org_id__projects__project_id__themes_post: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThemeCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["Theme"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Theme */
  get_theme_api_orgs__org_id__projects__project_id__themes__theme_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        theme_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Theme"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Theme */
  delete_theme_api_orgs__org_id__projects__project_id__themes__theme_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        theme_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Theme */
  update_theme_api_orgs__org_id__projects__project_id__themes__theme_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        theme_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ThemeUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Theme"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Concept Images */
  list_concept_images_api_orgs__org_id__projects__project_id__concept_images_get: {
    parameters: {
      query?: {
        /** @description Filter by image tag. */
        tag?: string | null;
      };
      path: {
        org_id: string;
        project_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConceptImage"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Concept Image */
  create_concept_image_api_orgs__org_id__projects__project_id__concept_images_post: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConceptImageCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["ConceptImage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Concept Image */
  get_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__get: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        image_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConceptImage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Concept Image */
  delete_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__delete: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        image_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Concept Image */
  update_concept_image_api_orgs__org_id__projects__project_id__concept_images__image_id__patch: {
    parameters: {
      path: {
        org_id: string;
        project_id: string;
        image_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConceptImageUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConceptImage"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Users */
  list_users_api_users_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** Create User */
  create_user_api_users_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get User */
  get_user_api_users__user_id__get: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete User */
  delete_user_api_users__user_id__delete: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      204: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update User */
  update_user_api_users__user_id__patch: {
    parameters: {
      path: {
        user_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserUpdate"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
